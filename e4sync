#!/bin/bash

######################################################################
#                                                                    #
#      Synchronizing for ext4 file system.                           #
#       (This program copys the subsecond in file time.)             #
#                                               by Robert. D Wei     #
#                                                                    #
######################################################################

BOARD_fDir=""
BOARD_tDir=""
BOARD_tmpFil=""

function newLnProtct () {
    while read lineX ; do
      lineX1="${lineX% --TailProtect-96H=UOW8WBQ--}"
      if [ "$lineX1" == "$lineX" ] ; then
        echo -n "$lineX"--NewLineProtect-96H=UOW8WBQ--
      else
        echo "$lineX1"
      fi
    done
}


function pkin2Dir() {
    lstDir=""
    while read lineX ; do
      if [ "$lstDir" == "" ] ; then
        if [ "${lineX:0:1}" == "d" ] ; then
          lstDir="${lineX:2}"
        fi
        echo "${lineX:2}"
      else
        nmeStr="${lineX:2}"
        if [ "$lstDir" != "${nmeStr:0:${#lstDir}}" ] \
             || [ "/" != "${nmeStr:${#lstDir}:1}" ] ; then
          echo "$nmeStr"
          if [ "${lineX:0:1}" == "d" ] ; then
            lstDir="$nmeStr"
          else
            lstDir=""
          fi
        fi
      fi
    done
} 


function exit_if_no_sqlite3() {

  if ! which sqlite3 > /dev/null ; then
    echo This script require \'sqlite3\'!
    exit 1
  fi
}


function exit_if_wrong_directory_name() {

  if [ "$1" == "" ] || [ "$2" == "" ] \
       || [ ! -d $1 ] || [ ! -d $2 ] ; then
    echo Use: $0 SOURCE_DIRECTORY TARGET_DIRECTORY
    exit 1
  fi
}


function full_path() {

  if [ "${1:0:1}" == "/" ] ; then
    echo "$1"
  else
    echo "$PWD/$1"
  fi
}


function process_env_and_args() {

  exit_if_no_sqlite3

  exit_if_wrong_directory_name "$@"

  BOARD_fDir="$( full_path "$1" )"
  BOARD_tDir="$( full_path "$2" )"

  BOARD_tmpFil=$(mktemp --suffix=.db)
}


function scan_directory() {
  local tabl="$1"
  local dirName="$2"
  local Find2SQLstr Hash2quote

  Find2SQLstr="INSERT INTO $tabl VALUES(%D, %i, %n, #%m#, #%y#, #%T+#,"
  Find2SQLstr+=" %s, #%p --TailProtect-96H=UOW8WBQ--\n"

  Hash2quote="s/\([^#]*\)#\([^#]*\)#, #\([^#]*\)#, #\([^#]*\)#, "
  Hash2quote+="\([0-9]*\), #/\1'\2', '\3', '\4', \5, '/ ; s/$/');/"

  cd $dirName
  (echo "CREATE TABLE $tabl(dev_num, inode, hlinks, permin, type, time,"\
   "size, file);"
   echo "BEGIN;"
   find -printf "$Find2SQLstr" \
     | tail -n +2 \
     | sed "s/+/ /; s| \./| |; s/'/''\"''\"''/g" \
     | newLnProtct \
     | sed "$Hash2quote" 
   echo "COMMIT;") | sqlite3 $BOARD_tmpFil
  cd - > /dev/null
}


function compare_directorys() {

  sqlite3 $BOARD_tmpFil << EOF

  CREATE TABLE remv AS SELECT * FROM tdir
      WHERE file NOT IN (SELECT file FROM fdir);

  CREATE TABLE new AS SELECT * FROM fdir
      WHERE file NOT IN (SELECT file FROM tdir);

  CREATE TABLE chg AS SELECT fdir.* 
      FROM fdir INNER JOIN tdir ON fdir.file = tdir.file
      WHERE NOT (fdir.time = tdir.time AND fdir.size = tdir.size
          AND fdir.type = tdir.type);

EOF
}

process_env_and_args "$@"

echo "1.  Scanning '$BOARD_fDir'..."
scan_directory fdir "$BOARD_fDir"

echo "2.  Scanning '$BOARD_tDir'..."
scan_directory tdir "$BOARD_tDir"

echo "3.  Comparing two directorys..."
compare_directorys

echo 4.  Synchronizing to \'$BOARD_tDir\'

cd $BOARD_tDir
remvs=$(sqlite3 $BOARD_tmpFil "SELECT type, file FROM remv ORDER BY file" | pkin2Dir | sed "s/^/'/ ; s/$/'/")
if [ ${#remvs} != 0 ] ; then
  echo rm -r $remvs | sed "s/--NewLineProtect-96H=UOW8WBQ--/\n/g" | bash
fi
sqlite3 $BOARD_tmpFil "SELECT type, file FROM new ORDER BY file" | pkin2Dir | sed "s|\(.*\)|cp -a '$BOARD_fDir/\1' '\1'|" | sed "s/--NewLineProtect-96H=UOW8WBQ--/\n/g" | bash
sqlite3 $BOARD_tmpFil "SELECT file FROM chg WHERE type = 'f' ORDER BY file" | sed "s|\(.*\)|cp -af '$BOARD_fDir/\1' '\1'| ; s/--NewLineProtect-96H=UOW8WBQ--/\n/g" | bash
sqlite3 $BOARD_tmpFil "SELECT time, file FROM fdir WHERE type = 'd' ORDER BY file DESC" | sed "s/^\([^|]*\)|\(.*\)/touch -d '\1' '\2'/ ; s/--NewLineProtect-96H=UOW8WBQ--/\n/g" | bash
cd - > /dev/null
rm $BOARD_tmpFil
