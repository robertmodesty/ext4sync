#!/bin/bash

######################################################################
#                                                                    #
#      Synchronizing for ext4 file system.                           #
#       (This program copys the subsecond in file time.)             #
#                                               by Robert. D Wei     #
#                                                                    #
######################################################################


###### Settings ######

readonly UserID=$( id -u )
test "$UserID" == "0" \
  && readonly is_Root=true \
  || readonly is_Root=false

readonly ThisProgram="$0"

#   setup in function get_both_directory_names():
#       readonly TemplateDir
#       readonly UpdatingDir

#   setup in function process_env_and_args():
#       readonly Arg_Sets_Move_Files
#       readonly VerbsOptn
#       readonly SQLFile

#   setup in function compare_directorys():
#       readonly There_Are_Files_To_Move




####################
# General Functions
########################################################################


function new_line_protect() {
  local lineX lineX1

  while read lineX ; do
    lineX1="${lineX% --TailProtect-96H=UOW8WBQ--}"
    if [ "$lineX1" == "$lineX" ] ; then
      echo -n "${lineX}--NewLineProtect-96H=UOW8WBQ--"
    else
      echo "$lineX1"
    fi
  done
}

function pack_into_one_directory() {
  local lstDir=""
  local lineX fileType nameWithPath

  while read lineX ; do
    fileType="${lineX:0:1}"
    nameWithPath="${lineX:2}"
    checkStr="${nameWithPath#$lstDir}"

    if [ "$nameWithPath" == "$checkStr" ] ; then

      echo "$nameWithPath"

      if [ "$fileType" == "d" ] ; then
        lstDir="$nameWithPath/"
      else
        lstDir=""
      fi

    fi
  done
}

function full_path() {

  if [ "${1:0:1}" == "/" ] ; then
    echo "$1"
  else
    echo "$PWD/$1"
  fi
}

function all_directory_above_the_files() {
  local nameWithPath directory

  while read nameWithPath ; do

    directory="${nameWithPath%/*}"
    test "$nameWithPath" == "$directory" && continue

    while [ "$directory" != '.' ] ; do
      echo "$directory"
      directory="${directory%/*}"
    done

  done \
    | sort \
    | uniq
}

function show_help_message() {
  cat <<- EOF

	Please use:

	  $ThisProgram [OPTIONS...]  DIRECTORY_AS_TEMPLATE DIRECTORY_TO_BE_UPDATED

	    OPTIONS:
	            -m, --moving-files
	            -v, --verbose

	EOF
}




####################
# Functions for Environment
########################################################################


function exit_if_no_sqlite3() {

  if ! which sqlite3 > /dev/null ; then
    echo This script require \'sqlite3\'!
    exit 1
  fi
}


function get_both_directory_names() {
  local tmpltDir updatDir hyphen
  declare -i count=0

  while [ -n "$1" ] ; do
    count=count+1
    if [ "-" != "${1:0:1}" ] || [ -n "$hyphen" ] ; then
      hyphen=""
      if [ -n "$tmpltDir" ] ; then
        updatDir="$1"
        break
      else
        tmpltDir="$1"
      fi
    elif [ "-" == "$1" ] ; then
      hyphen="on"
    fi
    shift
  done

  if [ "$tmpltDir" == "" ] || [ "$updatDir" == "" ] ; then
    echo "Error:  need two directories."
    show_help_message
    exit 1
  elif [ ! -d "$tmpltDir" ] ; then
    echo "Error:  '$tmpltDir' is not a valid directory!"
    exit 1
  elif [ ! -d "$updatDir" ] ; then
    echo "Error:  '$updatDir' is not a valid directory!"
    exit 1
  fi

  readonly TemplateDir="$( full_path "$tmpltDir" )"
  readonly UpdatingDir="$( full_path "$updatDir" )"
}




####################
# Functions for Compare Directorys
########################################################################


function create_the_difference_tables() {

  sqlite3 $SQLFile <<- EOF

	CREATE TABLE remv AS SELECT * FROM updat_dir
	    WHERE file NOT IN (SELECT file FROM tmplt_dir);

	CREATE TABLE new AS SELECT * FROM tmplt_dir
	    WHERE file NOT IN (SELECT file FROM updat_dir);

	CREATE TABLE chg AS SELECT tmplt_dir.*
	    FROM tmplt_dir INNER JOIN updat_dir
              ON tmplt_dir.file = updat_dir.file
	    WHERE NOT (    tmplt_dir.time = updat_dir.time
                       AND tmplt_dir.size = updat_dir.size)
	          AND tmplt_dir.type = updat_dir.type;

	CREATE TABLE typechg AS SELECT tmplt_dir.*
	    FROM tmplt_dir INNER JOIN updat_dir
              ON tmplt_dir.file = updat_dir.file
	    WHERE NOT (    tmplt_dir.time = updat_dir.time
                       AND tmplt_dir.size = updat_dir.size)
	          AND NOT tmplt_dir.type = updat_dir.type;

	CREATE TABLE set_ownership AS SELECT tmplt_dir.*
	    FROM tmplt_dir INNER JOIN updat_dir
              ON tmplt_dir.file = updat_dir.file
	    WHERE NOT (    tmplt_dir.uID = updat_dir.uID
                       AND tmplt_dir.gID = updat_dir.gID)
	          AND NOT
	              (    tmplt_dir.time = updat_dir.time
                       AND tmplt_dir.size = updat_dir.size)
	          AND tmplt_dir.type = updat_dir.type;

	CREATE TABLE set_permission AS SELECT tmplt_dir.*
	    FROM tmplt_dir INNER JOIN updat_dir
              ON tmplt_dir.file = updat_dir.file
	    WHERE NOT tmplt_dir.permission = updat_dir.permission
	          AND NOT (    tmplt_dir.time = updat_dir.time
                           AND tmplt_dir.size = updat_dir.size)
	          AND tmplt_dir.type = updat_dir.type;

	CREATE TABLE all_old AS
	    SELECT * FROM remv;
	INSERT INTO all_old SELECT * FROM updat_dir
	    WHERE file IN (SELECT file FROM chg);
	INSERT INTO all_old SELECT * FROM updat_dir
	    WHERE file IN (SELECT file FROM typechg);

	CREATE TABLE all_new AS SELECT * FROM new;
	INSERT INTO all_new SELECT * FROM chg;
	INSERT INTO all_new SELECT * FROM typechg;

	EOF
}

function create_the_move_files_table() {

  if ! $Arg_Sets_Move_Files ; then
    sqlite3 $SQLFile 'CREATE TABLE move_files(from_loc, to_loc);'
  else
    sqlite3 $SQLFile <<- EOF
	CREATE TABLE move_files
	        AS SELECT all_old.file AS from_loc, all_new.file AS to_loc
	    FROM all_old INNER JOIN all_new
	    WHERE all_old.filename = all_new.filename
	      AND all_old.time = all_new.time
	      AND all_old.size = all_new.size
	      AND all_old.type = all_new.type
	      AND all_old.subsecond != '0000000000'
	      AND all_old.type = "f";
	EOF
  fi
}


function create_hierarchy_tables_of_moved_files() {
  local filesMovedFrom filesMovedTo

  filesMovedFrom="$(sqlite3 $SQLFile 'SELECT from_loc FROM move_files;')"

  ( echo "CREATE TABLE all_directory_above_move_from(file);"
    echo "begin;"
    echo "$filesMovedFrom" \
      | sed "s/'/''/g" \
      | all_directory_above_the_files \
      | sed "s/^/INSERT INTO all_directory_above_move_from VALUES('/ ; s/$/');/"
    echo "commit;"
  ) | sqlite3 $SQLFile

  filesMovedTo="$(sqlite3 $SQLFile "SELECT to_loc FROM move_files;")"

  ( echo "CREATE TABLE all_directory_above_move_to(file);"
    echo "begin;"
    echo "$filesMovedTo" \
      | sed "s/'/''/g" \
      | all_directory_above_the_files \
      | sed "s/^/INSERT INTO all_directory_above_move_to VALUES('/ ; s/$/');/"
    echo "commit;"
  ) | sqlite3 $SQLFile
}

function update_the_tables_with_moved_files() {

  sqlite3 $SQLFile <<- EOF

	DELETE FROM remv
	  WHERE file IN (SELECT from_loc FROM move_files);

	DELETE FROM new
	  WHERE file IN (SELECT file FROM all_directory_above_move_to);
	DELETE FROM new
	  WHERE file IN (SELECT to_loc FROM move_files);

	DELETE FROM chg
	  WHERE file IN (SELECT to_loc FROM move_files);

	CREATE TEMP TABLE mov_owner_permission_tmp0
	  AS SELECT move_files.from_loc,
	            updat_dir.uID AS OlduID, updat_dir.gID AS OldgID,
	            updat_dir.permission AS oldPermission,
	            move_files.to_loc
               FROM move_files INNER JOIN updat_dir
	         ON move_files.from_loc = updat_dir.file;
	CREATE TEMP TABLE mov_owner_permission_tmp1
	  AS SELECT mov_owner_permission_tmp0.*,
	            tmplt_dir.uID AS NewuID, tmplt_dir.gID AS NewgID,
	            tmplt_dir.permission AS newPermission
               FROM mov_owner_permission_tmp0 INNER JOIN tmplt_dir
	         ON mov_owner_permission_tmp0.to_loc = tmplt_dir.file;

	DELETE FROM set_ownership
	  WHERE file IN (SELECT to_loc FROM mov_owner_permission_tmp1
	                  WHERE NewuID = OlduID
	                    AND NewgID = OldgID);
	INSERT INTO set_ownership
	       SELECT * FROM tmplt_dir
	        WHERE file IN (SELECT to_loc FROM mov_owner_permission_tmp1
	                        WHERE NOT NewuID = OlduID
	                           OR NOT NewgID = OldgID)
	          AND file NOT IN (SELECT file FROM set_ownership);

	DELETE FROM set_permission
	  WHERE file IN (SELECT to_loc FROM mov_owner_permission_tmp1
	                  WHERE newPermission = oldPermission);
	INSERT INTO set_permission
	       SELECT * FROM tmplt_dir
	        WHERE file IN (SELECT to_loc FROM mov_owner_permission_tmp1
	                        WHERE NOT newPermission = oldPermission)
	          AND file NOT IN (SELECT file FROM set_permission);

	EOF
}





####################
# Functions Checking Permissions
########################################################################
function files_been_denied_when_sync() {

  sqlite3 $SQLFile "CREATE TABLE user(uID);
                    INSERT INTO user VALUES($UserID);"

  sqlite3 $SQLFile <<- EOF

	SELECT file FROM all_new
	    WHERE file NOT IN (SELECT to_loc FROM move_files)
	      AND (   uID != (SELECT uID FROM user)
	           OR permission LIKE '3%'
	           OR permission LIKE '2%'
	           OR permission LIKE '1%'
	           OR permission LIKE '0%')
	    LIMIT 1;

	SELECT file FROM updat_dir
	    WHERE (   uID != (SELECT uID FROM user)
	           OR permission LIKE '5%'
	           OR permission LIKE '4%'
	           OR permission LIKE '1%'
	           OR permission LIKE '0%')
	      AND file IN (SELECT filepath FROM all_new)
	    LIMIT 1;

	SELECT file FROM updat_dir
	    WHERE (   uID != (SELECT uID FROM user)
	           OR permission LIKE '5%'
	           OR permission LIKE '4%'
	           OR permission LIKE '1%'
	           OR permission LIKE '0%')
	      AND file IN (SELECT filepath FROM all_old)
	    LIMIT 1;

	SELECT file FROM set_ownership LIMIT 1;

	SELECT file FROM set_permission
	    WHERE uID != (SELECT uID FROM user)
	    LIMIT 1;

	DROP TABLE user;

	EOF
}


function all_permission_allow() {
  local filesCantUpdate

  filesCantUpdate="$( files_been_denied_when_sync )"

  if [ -z "$filesCantUpdate" ] ; then
    return 0
  else
    return 1
  fi
}





####################
# Functions Synchronizing Directorys
########################################################################

function store_files_to_be_moved() {
  local moveProtctDir="$1"

    eval mkdir -p $VerbsOptn $(
     sqlite3 $SQLFile "SELECT to_loc FROM move_files;" \
      | sed "s/'/'\\\\''/g ;
             s|/[^/]*$|| ;
             s|^| '$moveProtctDir/| ; s/$/'/ ;
             s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
             s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
    ) || exit $?

    sqlite3 $SQLFile "
        CREATE TEMP TABLE move_file_temp AS SELECT * FROM move_files;
        UPDATE move_file_temp
         SET from_loc = from_loc || ' --TailProtect-96H=UOW8WBQ--';
        SELECT * FROM move_file_temp;" \
     | sed "s/'/'\\\\''/g ;
            s/^/mv $VerbsOptn '/ ;
            s/ --TailProtect-96H=UOW8WBQ--|/ --TailProtect-96H=UOW8WBQ--/ ;
            s| --TailProtect-96H=UOW8WBQ--|' '$moveProtctDir/| ;
            s/$/' || exit \$?/ ;
            s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
            s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
     | bash || exit $?
}

function set_attr_of_dirs_above_moved_files() {
  local shellCommands

  if $is_Root ; then
    shellCommands="chown \1:\2 '\4' || exit \$? ; chmod \3 '\4' || exit \$?"
  else
    shellCommands="chmod \3 '\4' || exit \$?"
  fi

  sqlite3 $SQLFile "
   SELECT uID, gID, permission, file FROM tmplt_dir
     WHERE file IN (SELECT * FROM all_directory_above_move_to);" \
   | sed "s/'/'\\\\''/g ;
          s/^\([^|]*\)|\([^|]*\)|\([^|]*\)|\(.*\)/$shellCommands/ ;
          s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
          s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
   | bash || exit $?
}

function restore_moved_files_to_new_location() {
  local moveProtctDir="$1"

  eval mkdir -p $VerbsOptn $(
   sqlite3 $SQLFile "SELECT to_loc FROM move_files;" \
    | sed "s/'/'\\\\''/g ;
           s|/[^/]*$|| ;
           s/^/ '/ ; s/$/'/ ;
           s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
           s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
  ) || exit $?

  set_attr_of_dirs_above_moved_files

  sqlite3 $SQLFile "SELECT to_loc FROM move_files;" \
   | sed "s/'/'\\\\''/g ;
          s|^\(.*\)$|mv $VerbsOptn '$moveProtctDir/\1' '\1'| ;
          s/$/ || exit \$?/ ;
          s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
          s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
   | bash || exit $?
}

function remove_old_files() {
  local remvs

  remvs=$( sqlite3 $SQLFile "
             SELECT type, file FROM updat_dir
               WHERE file IN (SELECT file FROM remv)
                  OR file IN (SELECT file FROM typechg
                                WHERE file NOT IN
                                      (SELECT from_loc FROM move_files)
                             )
               ORDER BY file;" \
           | pack_into_one_directory \
           | sed "s/'/'\\\\''/g ;
                  s/^/'/ ;
                  s/$/'/" )
  if [ ${#remvs} != 0 ] ; then
    echo rm -r $VerbsOptn $remvs '|| exit $?' \
      | sed "s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
             s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
      | bash || exit $?
  fi
}

function copy_new_files() {

  sqlite3 $SQLFile "
    SELECT type, file FROM tmplt_dir
      WHERE file IN (SELECT file FROM new)
         OR file IN (SELECT file FROM typechg
                       WHERE file NOT IN (SELECT to_loc FROM move_files)
                    )
         ORDER BY file;" \
   | pack_into_one_directory \
   | sed "s/'/'\\\\''/g ;
          s|\(.*\)|cp -a $VerbsOptn '$TemplateDir/\1' '\1'| ;
          s/$/ || exit \$?/ ;
          s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
          s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
   | bash || exit $?

  sqlite3 $SQLFile "SELECT file FROM chg
                          WHERE type = 'f'
                          ORDER BY file;" \
    | sed "s/'/'\\\\''/g ;
           s|\(.*\)|cp -af $VerbsOptn '$TemplateDir/\1' '\1'| ;
           s/$/ || exit \$?/ ;
           s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
           s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
    | bash || exit $?
}

function setup_changed_ownership() {


  sqlite3 $SQLFile "SELECT uID, gID, file FROM set_ownership
                      ORDER BY file
                      DESC;" \
   | sed "s/'/'\\\\''/g ;
          s/^\([^|]*\)|\([^|]*\)|\(.*\)/chown \1:\2 '\3'/ ;
          s/$/ || exit \$?/ ;
          s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
          s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
   | bash || exit $?
}

function setup_changed_permission() {


  sqlite3 $SQLFile "SELECT permission, file FROM set_permission
                      ORDER BY file
                      DESC;" \
   | sed "s/'/'\\\\''/g ;
          s/^\([^|]*\)|\(.*\)/chmod \1 '\2'/ ;
          s/$/ || exit \$?/ ;
          s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
          s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
   | bash || exit $?
}

function reset_directory_time() {

  sqlite3 $SQLFile "SELECT time, file FROM tmplt_dir
                      WHERE type = 'd'
                      ORDER BY file
                      DESC;" \
   | sed "s/'/'\\\\''/g ;
          s/^\([^|]*\)|\(.*\)/touch -d '\1' '\2'/ ;
          s/$/ || exit \$?/ ;
          s/--BackslashProtect-96H=UOW8WBQ--/\\\\/g ;
          s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
   | bash || exit $?
}





####################
# Functions of All Steps
########################################################################


function process_env_and_args() {
  declare -i dirCount=2

  exit_if_no_sqlite3

  get_both_directory_names "$@"

  Arg_Sets_Move_Files="false"
  VerbsOptn=""

  while [ -n "$1" ] ; do
    case "$1" in
      "-m"|"--moving-files")
        Arg_Sets_Move_Files="true"
        ;;
      "-v"|"--verbose")
        VerbsOptn="-v"
        ;;
      "-")
        shift
        dirCount=dirCount-1
        ;;
      "-"*)
        echo Error!  Unknown option:  $1
        show_help_message
        exit 1
        ;;
      *)
        dirCount=dirCount-1
        ;;
    esac

    if [ $dirCount -lt 0 ] ; then
      echo Error:  Too many directories.
      show_help_message
      exit 1
    fi

    shift
  done

  readonly Arg_Sets_Move_Files
  readonly VerbsOptn

  readonly SQLFile=$(mktemp --suffix=.db)
}


function scan_directory() {
  local tabl="$1"
  local dirName="$2"
  local Find2SQLstr Hash2quote
  local errfile="$( mktemp )"

  Find2SQLstr="INSERT INTO $tabl VALUES(%D, %i, %n, %U, %G, #%m#, #%y#, #%T+#,"
  Find2SQLstr+=" %s, #%p --TailProtect-96H=UOW8WBQ--\n"

  Hash2quote='s|^\([^#]*\)#\([^#]*\)#, #\([^#]*\)#, #\([^#.]*\.\)'
  Hash2quote+='\([0-9]*\)#, \([0-9]*\), #\(.*\)/\([^/]*\)$|'
  Hash2quote+="\1'\2', '\3', '\4\5', '\5', \6, '\7/\8', '\7', '\8');|"

  cd $dirName
  (echo "CREATE TABLE $tabl(dev_num, inode, hlinks, uID, gID," \
                           "permission, type, time, subsecond," \
                           "size, file, filepath, filename);"
   echo "BEGIN;"
   find -printf "$Find2SQLstr" 2> $errfile \
     | tail -n +2 \
     | sed 's/+/ /; s/\\/--BackslashProtect-96H=UOW8WBQ--/g;'" s/'/''/g" \
     | new_line_protect \
     | sed "$Hash2quote"
   echo "COMMIT;") | sqlite3 $SQLFile
  cd - > /dev/null

  if [ "$( cat $errfile )" != "" ] ; then
    cat $errfile 1>&2
    rm $errfile
    return 1
  fi

  rm $errfile
}


function compare_directorys() {

  create_the_difference_tables

  There_Are_Files_To_Move="false"
  create_the_move_files_table
  checkStr="$(sqlite3 $SQLFile 'SELECT * FROM move_files LIMIT 1;')"
  test -n "$checkStr" && There_Are_Files_To_Move="true"
  readonly There_Are_Files_To_Move

  if $There_Are_Files_To_Move ; then

    create_hierarchy_tables_of_moved_files

    update_the_tables_with_moved_files

  fi
}


function permission_could_deny() {

  if $is_Root || all_permission_allow ; then
    return 1
  else
    return 0
  fi
}


function synchronize(){
  local moveProtctDir

  cd $UpdatingDir

  if $There_Are_Files_To_Move ; then
    moveProtctDir="$( mktemp -d -p $UpdatingDir )"
    store_files_to_be_moved $moveProtctDir
  fi

  remove_old_files

  if $There_Are_Files_To_Move ; then
    restore_moved_files_to_new_location $moveProtctDir
  fi

  copy_new_files

  setup_changed_ownership

  setup_changed_permission

  reset_directory_time

  if $There_Are_Files_To_Move ; then
    rm -rf $moveProtctDir
  fi

  cd - > /dev/null
}







####################
#  Main Function
########################################################################

function main() {

  process_env_and_args "$@"

  echo "1.  Scanning '$TemplateDir'..."
  scan_directory tmplt_dir "$TemplateDir" || exit $?

  echo "2.  Scanning '$UpdatingDir'..."
  scan_directory updat_dir "$UpdatingDir" || exit $?

  echo "3.  Comparing two directorys..."
  compare_directorys

  if permission_could_deny ; then
    echo 'Permission could deny, are you root?' 1>&2
    rm $SQLFile
    exit 1
  fi

  echo "4.  Synchronizing to '$UpdatingDir'"
  synchronize

  rm $SQLFile
}







##### Start this program ######

main "$@"
