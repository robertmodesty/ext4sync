#!/bin/bash

######################################################################
#                                                                    #
#      Synchronizing for ext4 file system.                           #
#       (This program copys the subsecond in file time.)             #
#                                               by Robert. D Wei     #
#                                                                    #
######################################################################

BOARD_fDir=""
BOARD_tDir=""
BOARD_tmpFil=""
BOARD_moveFile="on"
BOARD_verbose=""

function new_line_protect () {
  local lineX lineX1

  while read lineX ; do
    lineX1="${lineX% --TailProtect-96H=UOW8WBQ--}"
    if [ "$lineX1" == "$lineX" ] ; then
      echo -n "${lineX}--NewLineProtect-96H=UOW8WBQ--"
    else
      echo "$lineX1"
    fi
  done
}


function pack_into_one_directory() {
  local lstDir=""
  local lineX fileType nameWithPath

  while read lineX ; do
    fileType="${lineX:0:1}"
    nameWithPath="${lineX:2}"
    checkStr="${nameWithPath#$lstDir}"

    if [ "$nameWithPath" == "$checkStr" ] ; then

      echo "$nameWithPath"

      if [ "$fileType" == "d" ] ; then
        lstDir="$nameWithPath/"
      else
        lstDir=""
      fi

    fi
  done
}


function exit_if_no_sqlite3() {

  if ! which sqlite3 > /dev/null ; then
    echo This script require \'sqlite3\'!
    exit 1
  fi
}


function get_both_directory_names() {
  local fDir tDir hyphen
  declare -i count=0

  while [ -n "$1" ] ; do
    count=count+1
    if [ "-" != "${1:0:1}" ] || [ -n "$hyphen" ] ; then
      hyphen=""
      if [ -n "$fDir" ] ; then
        tDir="$1"
        break
      else
        fDir="$1"
      fi
    elif [ "-" == "$1" ] ; then
      hyphen="on"
    fi
    shift
  done

  if [ "$fDir" == "" ] || [ "$tDir" == "" ] ; then
    echo Use: $0 SOURCE_DIRECTORY TARGET_DIRECTORY
    exit 1
  elif [ ! -d "$fDir" ] ; then
    echo "Error:  '$fDir' is not a valid directory!"
    exit 1
  elif [ ! -d "$tDir" ] ; then
    echo "Error:  '$tDir' is not a valid directory!"
    exit 1
  fi

  BOARD_fDir="$( full_path "$fDir" )"
  BOARD_tDir="$( full_path "$tDir" )"

  return $count
}


function full_path() {

  if [ "${1:0:1}" == "/" ] ; then
    echo "$1"
  else
    echo "$PWD/$1"
  fi
}


function process_env_and_args() {

  exit_if_no_sqlite3

  get_both_directory_names "$@"
  shift $?

  while [ -n "$1" ] ; do
    case "$1" in
      "-s"|"--skip-moving-files")
        BOARD_moveFile="off"
        ;;
      "-v"|"--verbose")
        BOARD_verbose="-v"
        ;;
    esac
    shift
  done

  BOARD_tmpFil=$(mktemp --suffix=.db)
}


function scan_directory() {
  local tabl="$1"
  local dirName="$2"
  local Find2SQLstr Hash2quote

  Find2SQLstr="INSERT INTO $tabl VALUES(%D, %i, %n, #%m#, #%y#, #%T+#,"
  Find2SQLstr+=" %s, #%p --TailProtect-96H=UOW8WBQ--\n"

  Hash2quote='s|^\([^#]*\)#\([^#]*\)#, #\([^#]*\)#, #\([^#.]*\.\)'
  Hash2quote+='\([0-9]*\)#, \([0-9]*\), #\(.*\)/\([^/]*\)$|'
  Hash2quote+="\1'\2', '\3', '\4\5', '\5', \6, '\7/\8', '\8');|"

  cd $dirName
  (echo "CREATE TABLE $tabl(dev_num, inode, hlinks, permin, type," \
   "time, subsecond, size, file, filename);"
   echo "BEGIN;"
   find -printf "$Find2SQLstr" \
     | tail -n +2 \
     | sed "s/+/ /; s/'/''/g" \
     | new_line_protect \
     | sed "$Hash2quote"
   echo "COMMIT;") | sqlite3 $BOARD_tmpFil
  cd - > /dev/null
}


function all_hierarchy_of_the_files() {
  local nameWithPath directory

  while read nameWithPath ; do

    echo "$nameWithPath"
    directory="${nameWithPath%/*}"
    test "$nameWithPath" == "$directory" && continue

    while [ "$directory" != '.' ] ; do
      echo "$directory"
      directory="${directory%/*}"
    done

  done \
    | sort \
    | uniq
}

function compare_directorys() {
  local sqlCmd filesMovedTo

  sqlite3 $BOARD_tmpFil <<- EOF

	CREATE TABLE remv AS SELECT * FROM tdir
	    WHERE file NOT IN (SELECT file FROM fdir);

	CREATE TABLE new AS SELECT * FROM fdir
	    WHERE file NOT IN (SELECT file FROM tdir);

	CREATE TABLE chg AS SELECT fdir.*
	    FROM fdir INNER JOIN tdir ON fdir.file = tdir.file
	    WHERE NOT (fdir.time = tdir.time AND fdir.size = tdir.size
	        AND fdir.type = tdir.type);

	CREATE TEMP TABLE all_old AS SELECT * FROM remv;
	INSERT INTO all_old SELECT * FROM tdir
	  WHERE file IN (SELECT file FROM chg);

	CREATE TEMP TABLE all_new AS SELECT * FROM new;
	INSERT INTO all_new SELECT * FROM chg;

	CREATE TABLE move_files
	        AS SELECT all_old.file AS from_loc, all_new.file AS to_loc
	    FROM all_old INNER JOIN all_new
	    WHERE all_old.filename = all_new.filename
	      AND all_old.time = all_new.time
	      AND all_old.size = all_new.size
	      AND all_old.type = all_new.type
	      AND all_old.subsecond != '0000000000'
	      AND all_old.type = "f";
	EOF

  if [ "on" == "$BOARD_moveFile" ] ; then
    sqlCmd="$(
      echo "begin;"
      sqlite3 $BOARD_tmpFil "SELECT from_loc FROM move_files;" \
        | all_hierarchy_of_the_files \
        | sed "s/^/DELETE FROM remv WHERE file = '/ ; s/$/';/"
      echo "commit;"
    )"
    echo "$sqlCmd" | sqlite3 $BOARD_tmpFil
    unset sqlCmd

    filesMovedTo="$(sqlite3 $BOARD_tmpFil "SELECT to_loc FROM move_files;")"

    if [ -n "$filesMovedTo" ] ; then
      ( echo "begin;"
        echo "$filesMovedTo" \
          | all_hierarchy_of_the_files \
          | sed "s/^/DELETE FROM new WHERE file = '/ ; s/$/';/"
        echo "commit;"
      ) | sqlite3 $BOARD_tmpFil

      ( echo "begin;"
        echo "$filesMovedTo" \
          | sed "s/^/DELETE FROM chg WHERE file = '/ ; s/$/';/"
        echo "commit;"
      ) | sqlite3 $BOARD_tmpFil

      sqlite3 $BOARD_tmpFil \
        " update move_files
             set from_loc = from_loc || ' --TailProtect-96H=UOW8WBQ--'; "
    else
      BOARD_moveFile="off"
    fi
  fi
}


function synchronize(){
  local remvs

  cd $BOARD_tDir

  remvs=$( sqlite3 $BOARD_tmpFil "SELECT type, file FROM remv
                                   ORDER BY file;" \
           | pack_into_one_directory \
           | sed "s/'/'\\\\''/g ;
                  s/^/'/ ;
                  s/$/'/" )
  if [ ${#remvs} != 0 ] ; then
    echo rm -r $BOARD_verbose $remvs '|| exit $?' \
      | sed "s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
      | bash || exit $?
  fi

  if [ "on" == "$BOARD_moveFile" ] ; then
      eval mkdir -p $BOARD_verbose $(
       sqlite3 $BOARD_tmpFil "SELECT to_loc FROM move_files;" \
       | sed "s/'/'\\\\''/g ;
              s|/[^/]*$|| ;
              s/^/ '/ ; s/$/'/ ;
              s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
      ) || exit $?

      sqlite3 $BOARD_tmpFil "SELECT * FROM move_files;" \
      | sed "s/'/'\\\\''/g ;
             s/^/mv $BOARD_verbose '/ ;
             s/ --TailProtect-96H=UOW8WBQ--|/' '/ ;
             s/$/' || exit \$?/ ;
             s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
      | bash || exit $?
  fi

  sqlite3 $BOARD_tmpFil "SELECT type, file FROM new
                          ORDER BY file;" \
    | pack_into_one_directory \
    | sed "s/'/'\\\\''/g ;
           s|\(.*\)|cp -a $BOARD_verbose '$BOARD_fDir/\1' '\1'| ;
           s/$/ || exit \$?/ ;
           s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
    | bash || exit $?

  sqlite3 $BOARD_tmpFil "SELECT file FROM chg
                          WHERE type = 'f'
                          ORDER BY file;" \
    | sed "s/'/'\\\\''/g ;
           s|\(.*\)|cp -af $BOARD_verbose '$BOARD_fDir/\1' '\1'| ;
           s/$/ || exit \$?/ ;
           s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
    | bash || exit $?

  sqlite3 $BOARD_tmpFil "SELECT time, file FROM fdir
                          WHERE type = 'd'
                          ORDER BY file
                          DESC;" \
    | sed "s/'/'\\\\''/g ;
           s/^\([^|]*\)|\(.*\)/touch -d '\1' '\2'/ ;
           s/$/ || exit \$?/ ;
           s/--NewLineProtect-96H=UOW8WBQ--/\n/g" \
    | bash || exit $?

    cd - > /dev/null
}


function main() {

  process_env_and_args "$@"

  echo "1.  Scanning '$BOARD_fDir'..."
  scan_directory fdir "$BOARD_fDir"

  echo "2.  Scanning '$BOARD_tDir'..."
  scan_directory tdir "$BOARD_tDir"

  echo "3.  Comparing two directorys..."
  compare_directorys

  echo "4.  Synchronizing to '$BOARD_tDir'"
  synchronize

  rm $BOARD_tmpFil
}


main "$@"
